/*
                                                                
                       H                                         
                       HCHCHC                  H                
                       HCHCHCHCHC            HCH                
                       HCHCHCHCHCHCHCH    HCHCHCH               
                      HCHCHCHCHCHCHCHCHCHCHCHCHCHC              
           HCHCHCHCHCHCHCHCHCHCHCHCH HCHCHCHCHCHCHC             
     HCHCHCHCHCHCHCHCHCHCHCHCHCHC  HCHCHCHCHCHCHCHC             
        HCHCHCHCHCHCHC HCHCH         HCHCHCHCHCHCHCH            
          HCHCHCHCHCHC H                     HCHCHCH            
          HCHCHCHCHCH                      HCHCHCHCHCHCHCHCHCH  
         HCHCH HCHCH                        HCHCHCHCHCHCHCHC    
       HCHCHCHCH  HC                          HCHCHCHCHCHCH     
      HCHCHCHCHCH                              HCHCHCHCHCH      
     HCHCHCHCHCHCHC                         HCHC HCHCHCH        
   HCHCHCHCHCHCHCHCH                        HCHCHCHCHCH         
  HCHCHCHCHCHCHCHCHCHC                     HCHCHCHCHC           
            HCHCHCHCH                  HC HCHCHCHCHCHCH         
             HCHCHCHCHCHCHCHCHC   HCHCHCH HCHCHCHCHCHCHCHC      
             HCHCHCHCHCHCHCHC  HCHCHCHCHCHCHCHCHCHCHCHCHCHC     
              HCHCHCHCHCHCHCHCHCHCHCHCHCHCHCHCHC                
              HCHCHCHCHCHCHCHCHCHCHCHCHCH                       
               HCHCHC        HCHCHCHCHCHC                       
                HCH             HCHCHCHCH                       
                                      HCH                       
										H


2021@HyperCol Studios
*/

//-------------------- Orignal --------------------//

clouds = off
oldLighting = true
underwaterOverlay = false
sun=false

##--## Custom Uniform #-------------------------------------------------------##

#	biome----
variable.float.biomeTem = clamp(smooth(0, temperature, 12.0, 12.0), 0.0, 1.0)
variable.float.biomeRainfall = clamp(smooth(3, rainfall, 12.0, 12.0), 0.0, 1.0)
variable.float.biomeRS = if(\
	temperature > 0.95, 0.0, \
	temperature < 0.15, 0.5, \
	1.0)
variable.float.biomeRSsmooth = smooth(1, biomeRS, 12.0, 12.0)
#uniform.float.AdjTemp = temperature
#uniform.float.AdjRainfall = clamp(min(1.0, biomeRS * 2.0), 0.0, 1.0) * AdjTemp
uniform.vec3.BiomeType = vec3(biomeRainfall, biomeRSsmooth, biomeTem)

#	rain----
variable.float.brs0 = clamp((biomeRSsmooth		) * 2.0, 0.0, 1.0)
variable.float.brs1 = clamp((biomeRSsmooth - 0.5) * 2.0, 0.0, 1.0)
uniform.float.rain0 = rainStrength * brs0 * brs0 * (3.0 - 2.0 * brs0)
uniform.float.rain1 = rainStrength * brs1 * brs1 * (3.0 - 2.0 * brs1)

#	day----
variable.float.day = worldTime / 24000.0
uniform.float.day_cycle = smooth(4, (moonPhase * (1.0 - day) + frac((moonPhase + 1) / 8.0) * 8.0 * day + frameTimeCounter * 0.0001), 1.0, 1.0)

variable.float.day_i = floor(day_cycle)
variable.float.day_f = frac(day_cycle)
variable.float.day_u = day_f * day_f * (3.0 - 2.0 * day_f)
variable.float.hast0 = frac(day_i * 0.2031)
variable.float.hast01 = hast0 * (39.38 + hast0)
variable.float.hast02 = frac(hast01 * hast01)
variable.float.hast1 = frac((day_i + 1.0) * 0.2031)
variable.float.hast11 = hast1 * (39.38 + hast1)
variable.float.hast12 = frac(hast11 * hast11)
variable.float.day_n = (hast02 * (1.0 - day_u) + hast12 * day_u) * 2.0 - 1.0
uniform.float.cloud_coverage = max(day_n * 0.3, rain0, wetness)

#	time----
variable.float.sunRise0 =	clamp((worldTime - 23200.0) / 400.0, 	0.0, 1.0)
variable.float.sunRise1 = 	clamp((worldTime			) / 2000.0, 0.0, 1.0)
variable.float.sunRise2 = 	clamp((worldTime - 23000.0) / 1000.0, 0.0, 1.0)
variable.float.sunSet0 	= 	clamp((worldTime - 10000.0) / 2000.0, 0.0, 1.0)
variable.float.sunSet1 	= 	clamp((worldTime - 12600.0) / 170.0, 	0.0, 1.0)
variable.float.sunSet2 	= 	clamp((worldTime - 12500.0) / 250.0, 	0.0, 1.0)
variable.float.moonRise0	= 	clamp((worldTime - 12890.0) / 210.0, 	0.0, 1.0)
variable.float.moonRise1 	= 	clamp((worldTime - 13250.0) / 1000.0,	0.0, 1.0)
variable.float.moonSet0 	= 	clamp((worldTime - 21000.0) / 1500.0, 0.0, 1.0)
variable.float.moonSet1 	= 	clamp((worldTime - 22700.0) / 400.0, 	0.0, 1.0)

uniform.vec4.Time = vec4((sunRise0 * sunRise0 * (3.0 - 2.0 * sunRise0) + 1.0 - sunRise1), \
	(sunRise1 - sunSet0), \
	(sunSet0 - sunSet1 * sunSet1 *(3.0 - 2.0 * sunSet1)), \
	(sunSet1 * sunSet1 * (3.0 - 2.0 * sunSet1) - sunRise0 * sunRise0 * (3.0 - 2.0 * sunRise0)))
uniform.vec4.nTime = vec4((moonRise0 * moonRise0 * (3.0 - 2.0 * moonRise0) - moonRise1), \
	(moonRise1 - moonSet0), \
	(moonSet0 - moonSet1 * moonSet1 *(3.0 - 2.0 * moonSet1)), \
	(moonSet1 * moonSet1 * (3.0 - 2.0 * moonSet1) + 1.0 - moonRise0 * moonRise0 * (3.0 - 2.0 * moonRise0)))
uniform.vec4.SunTime0 = vec4((sunRise2 * sunRise2 * (3.0 - 2.0 * sunRise2) + 1.0 - sunRise1), \
	(sunRise1 - sunSet0), \
	(sunSet0 - sunSet2 * sunSet2 *(3.0 - 2.0 * sunSet2)), \
	(sunSet2 * sunSet2 * (3.0 - 2.0 * sunSet2) - sunRise2 * sunRise2 * (3.0 - 2.0 * sunRise2)))

#	pixel----
uniform.vec2.pixel = vec2(1.0 / viewWidth, 1.0 / viewHeight)

#	vignette----
uniform.float.valLive = if(is_alive, 1.0, 0.0)
variable.float.valHurt = min(smooth(2, if(is_hurt, 1.3, 0), 0, 4), 1)
uniform.vec3.vignetteColor = vec3(0.2 * valHurt, 0.0, 0.0)

#	light vector----
uniform.float.fov = atan(1.0 / gbufferProjection.1.1)
uniform.float.mulfov = if(\
	isEyeInWater > 1, gbufferProjection.1.1 * tan(fov * 0.85), \
	1.0)

variable.float.sunVectorNorm = 1.0 / sqrt((sunPosition.x * sunPosition.x) + (sunPosition.y * sunPosition.y) + (sunPosition.z * sunPosition.z))
uniform.vec3.sunVectorView = vec3(sunPosition.x * sunVectorNorm, sunPosition.y * sunVectorNorm, sunPosition.z * sunVectorNorm)
variable.float.sunVectorX = gbufferModelViewInverse.0.0 * sunPosition.x + gbufferModelViewInverse.1.0 * sunPosition.y + gbufferModelViewInverse.2.0 * sunPosition.z
variable.float.sunVectorY = gbufferModelViewInverse.0.1 * sunPosition.x + gbufferModelViewInverse.1.1 * sunPosition.y + gbufferModelViewInverse.2.1 * sunPosition.z
variable.float.sunVectorZ = gbufferModelViewInverse.0.2 * sunPosition.x + gbufferModelViewInverse.1.2 * sunPosition.y + gbufferModelViewInverse.2.2 * sunPosition.z
uniform.vec3.sunVector = vec3(sunVectorX * sunVectorNorm, sunVectorY * sunVectorNorm, sunVectorZ * sunVectorNorm)

variable.float.moonVectorNorm = 1.0 / sqrt((moonPosition.x * moonPosition.x) + (moonPosition.y * moonPosition.y) + (moonPosition.z * moonPosition.z))
uniform.vec3.moonVectorView = vec3(moonPosition.x * moonVectorNorm, moonPosition.y * moonVectorNorm, moonPosition.z * moonVectorNorm)
variable.float.moonVectorX = gbufferModelViewInverse.0.0 * moonPosition.x + gbufferModelViewInverse.1.0 * moonPosition.y + gbufferModelViewInverse.2.0 * moonPosition.z
variable.float.moonVectorY = gbufferModelViewInverse.0.1 * moonPosition.x + gbufferModelViewInverse.1.1 * moonPosition.y + gbufferModelViewInverse.2.1 * moonPosition.z
variable.float.moonVectorZ = gbufferModelViewInverse.0.2 * moonPosition.x + gbufferModelViewInverse.1.2 * moonPosition.y + gbufferModelViewInverse.2.2 * moonPosition.z
uniform.vec3.moonVector = vec3(moonVectorX * moonVectorNorm, moonVectorY * moonVectorNorm, moonVectorZ * moonVectorNorm)

variable.float.shadowLightVectorNorm = 1.0 / sqrt((shadowLightPosition.x * shadowLightPosition.x) + (shadowLightPosition.y * shadowLightPosition.y) + (shadowLightPosition.z * shadowLightPosition.z))
uniform.vec3.shadowLightVectorView = vec3(shadowLightPosition.x * moonVectorNorm, shadowLightPosition.y * moonVectorNorm, shadowLightPosition.z * moonVectorNorm)
variable.float.shadowLightVectorX = gbufferModelViewInverse.0.0 * shadowLightPosition.x + gbufferModelViewInverse.1.0 * shadowLightPosition.y + gbufferModelViewInverse.2.0 * shadowLightPosition.z
variable.float.shadowLightVectorY = gbufferModelViewInverse.0.1 * shadowLightPosition.x + gbufferModelViewInverse.1.1 * shadowLightPosition.y + gbufferModelViewInverse.2.1 * shadowLightPosition.z
variable.float.shadowLightVectorZ = gbufferModelViewInverse.0.2 * shadowLightPosition.x + gbufferModelViewInverse.1.2 * shadowLightPosition.y + gbufferModelViewInverse.2.2 * shadowLightPosition.z
uniform.vec3.shadowLightVector = vec3(shadowLightVectorX * shadowLightVectorNorm, shadowLightVectorY * shadowLightVectorNorm, shadowLightVectorZ * shadowLightVectorNorm)

variable.float.cameraX=cameraPosition.x
variable.float.cameraZ=cameraPosition.z
uniform.vec3.P=vec3(cameraX, eyeAltitude, cameraZ)

//-------------------- ButtonGUIS --------------------//

screen=<profile> VERSION [COMMON] <empty> [SKY_ATMOSPHERIC] [CUSTOM] [LIGHTING] [TONE_OPTION] [EFFECTS] [WATER] [POM] [MISC]

//-------------------- Profiles --------------------//

profile.NORMAL=*

profile.

profile.

profile.


//-------------------- Screen columns --------------------//

screen.COMMON.columns=1
	screen.LIGHT_BAR.columns=1

screen.SURFACE.columns=1

screen.CUSTOM.columns=2
	screen.CUSTOMCOLOR.columns=1
	screen.CUSTOM_SKY_NIGHT.columns=1
	screen.CUSTOM_SKY_NOON.columns=1
	screen.CUSTOM_SUNLIGHT_DAY.columns=1
	screen.CUSTOM_SUNLIGHT_RISESET.columns=1
	screen.CUSTOM_SUNLIGHT_NIGHT.columns=1
	screen.CUSTOM_AURORA_COLOR.columns=1
	screen.CUSTOM_WATER_COLOR.columns=1
	screen.CUSTOM_FOG_COLOR.columns=1
	screen.CUSTOM_VL_COLOR_NOON.columns=1
	screen.CUSTOM_VL_COLOR_RISESET.columns=1
	screen.CUSTOM_VL_COLOR_MIDNIGHT.columns=1

screen.LIGHTING.columns=1
	screen.LIGHT.columns=1
		screen.POINTLIGHT.columns=1
		screen.BLOOM_EXPOSE.columns=1
		screen.GI_AO.columns=1
	screen.SHADOW.columns=1
	
screen.SKY_ATMOSPHERIC.columns=1
	screen.FOG.columns=2
	screen.AURORA.columns=3
	screen.VOLUMETRIC_LIGHT.columns=1
	screen.ATMOSPHER_SCATTERING.columns=1
	screen.CLOUD.columns=2
	
screen.WATER.columns=2

screen.POM.columns=1

screen.EFFECTS.columns=1
	screen.DOF.columns=2
	screen.PLANT_WAVE.columns=2
	
screen.MISC.columns=2
	


//-------------------- Screen --------------------//

screen.COMMON=[LIGHT_BAR]
	screen.LIGHT_BAR=POINTLIGHT_COL_TEMP_LINKER WATER_SPEED_LIGHT_BAR_LINKER PLANT_SPEED_LIGHT_BAR_LINKER LINK_FOCUS_TO_BRIGHTNESS_BAR
	screen.

screen.TONE_OPTION = EXPOSURE SHADER_NIGHT_VISION <empty> <empty> [COLORFUL_TONE]
	screen.COLORFUL_TONE = HUE_ADJUSTMENT <empty> <empty> <empty> TONE [CUSTOM_COLOR_TONE] BLACK_AND_WHITE PRIME_RENDER FILMIC_CINEMATIC <empty> <empty>
	screen.CUSTOM_COLOR_TONE=BRIGHTNESS CONTRAST SATURATION VIBRANCE HUE <empty> <empty> <empty> <empty> KEEP_BROGHTNESS <empty> <empty> <empty> <empty> <empty> COLOR_BALANCE_S_R COLOR_BALANCE_M_R COLOR_BALANCE_H_R COLOR_BALANCE_S_G COLOR_BALANCE_M_G COLOR_BALANCE_H_G COLOR_BALANCE_S_B COLOR_BALANCE_M_B COLOR_BALANCE_H_B

screen.CUSTOM=[CUSTOMCOLOR] <empty> <empty> <empty> [CUSTOM_SKY_NIGHT] [CUSTOM_SKY_NOON] [CUSTOM_SUNLIGHT_DAY] [CUSTOM_SUNLIGHT_RISESET] [CUSTOM_SUNLIGHT_NIGHT] <empty> <empty> <empty> [CUSTOM_AURORA_COLOR] [CUSTOM_VL_COLOR_NOON] [CUSTOM_WATER_COLOR] [CUSTOM_VL_COLOR_RISESET] [CUSTOM_FOG_COLOR] [CUSTOM_VL_COLOR_MIDNIGHT]
	screen.CUSTOMCOLOR=CUSTOM_TONED <empty> CUSTOM_T_R  <empty> CUSTOM_T_G <empty> CUSTOM_T_B <empty> CUSTOM_T_L
	screen.CUSTOM_SKY_NIGHT=SKYLIGHT_NIGHT_R <empty> SKYLIGHT_NIGHT_G  <empty> SKYLIGHT_NIGHT_B  <empty> SKYLIGHT_NIGHT_L <empty> FANTASIC_NIGHTSKY
	screen.CUSTOM_SKY_NOON=SKYLIGHT_DAY_RED <empty> SKYLIGHT_DAY_GREEN <empty> SKYLIGHT_DAY_BLUE <empty> SKYLIGHT_DAY_L
	screen.CUSTOM_SUNLIGHT_DAY=CUSTOM_SL_NN_R <empty> CUSTOM_SL_NN_G <empty> CUSTOM_SL_NN_B <empty> CUSTOM_SL_NN_L
	screen.CUSTOM_SUNLIGHT_RISESET=CUSTOM_SL_SR_R <empty> CUSTOM_SL_SR_G <empty> CUSTOM_SL_SR_B <empty> CUSTOM_SL_SR_L
	screen.CUSTOM_SUNLIGHT_NIGHT=CUSTOM_SL_NT_R <empty> CUSTOM_SL_NT_G <empty> CUSTOM_SL_NT_B <empty> CUSTOM_SL_NT_L
	screen.CUSTOM_AURORA_COLOR=NIGHT_AURORA_R <empty> NIGHT_AURORA_G <empty> NIGHT_AURORA_B <empty> NIGHT_AURORA_L
	screen.CUSTOM_WATER_COLOR=WATER_COLOR_F_R <empty> WATER_COLOR_F_G <empty> WATER_COLOR_F_B
	screen.CUSTOM_FOG_COLOR=CUSTOM_VLFC_R <empty> CUSTOM_VLFC_G <empty> CUSTOM_VLFC_B
	screen.CUSTOM_VL_COLOR_NOON=VL_NOON_R <empty> VL_NOON_G <empty> VL_NOON_B <empty> VL_NOON_L
	screen.CUSTOM_VL_COLOR_RISESET=VL_SUNRISESET_R <empty> VL_SUNRISESET_G <empty> VL_SUNRISESET_B <empty> VL_SUNRISESET_L
	screen.CUSTOM_VL_COLOR_MIDNIGHT=VL_NIGHT_R <empty> VL_NIGHT_G <empty> VL_NIGHT_B <empty> VL_NIGHT_L

screen.LIGHTING=[LIGHT] <empty> [SHADOW] <empty> Disabled_SkyLight_Occlusion
	screen.LIGHT=[POINTLIGHT] [BLOOM_EXPOSE] [GI_AO] <empty> [CUSTOM_SUNLIGHT_DAY] [CUSTOM_SUNLIGHT_RISESET] [CUSTOM_SUNLIGHT_NIGHT]
		screen.POINTLIGHT=POINTLIGHT_COLOR_TEMPERATURE TORCHLIGHT_BRIGHTNESS <empty> POINTLIGHT_COL_TEMP_LINKER 
		screen.BLOOM_EXPOSE=BLOOM_EFFECTS BLOOM_AMOUNT <empty> AVERAGE_EXPOSURE
		screen.GI_AO=ENABLE_SSAO GI <empty> GI_QUALITY GI_ARTIFACT_REDUCTION GI_RENDER_RESOLUTION GI_RADIUS
	screen.SHADOW=shadowMapResolution shadowDistance <empty> ENABLE_SOFT_SHADOWS VARIABLE_PENUMBRA_SHADOWS COLORED_SHADOWS PIXEL_SHADOWS <empty> SHADOW_MAP_BIAS 

screen.SKY_ATMOSPHERIC=[FOG] [AURORA] [CLOUD] [VOLUMETRIC_LIGHT] sunPathRotation [CUSTOM_SKY_NIGHT] [CUSTOM_SKY_NOON] STAR RAINBOW High_Altitude_Clouds
	screen.FOG=<empty> <empty> <empty> <empty> Enabled_Volumetric_Fog Fog_Coverage Fog_Top Sunrise_Sunset_Density Fog_Bottom Noon_Density <empty> Night_Density <empty> <empty> Enabled_God_Rays ATMOSPHERIC_SCATTERING God_Rays_Phase AtmospherieDensity
screen.SKY_ATMOSPHERIC=[FOG] [AURORA] [CLOUD] [VOLUMETRIC_LIGHT] sunPathRotation [ATMOSPHER_SCATTERING] [CUSTOM_SKY_NIGHT] [CUSTOM_SKY_NOON] STAR RAINBOW
	screen.FOG=TRUE_VOLUMETRIC_CLOUDS2 Volumetric_Cloud_Type2 VFCWWT <empty> <empty> <empty> FOGDENS_SUNRISE FOGDENS_NOON FOGDENS_MIDNIGHT CUSTOM_VLFC_R CUSTOM_VLFC_G CUSTOM_VLFC_B <empty> <empty> <empty> Cloud3Height2 Cloud3Depth2 VOLUMETRIC_CLOUD_SPEED2 CLOUD_DISPERSE2 Vol_Cloud_Coverage2 VOLUMETRIC_CLOUD_LIGHTING2 VFDensityStrength CLOUD_PRECISION2 SOFT_FLUFFY_CLOUDS2
	screen.AURORA=AURORA NIGHT_AURORA_L AURORA_STRENGTH AURORA_PRESET_COL AURORA_COLOR <empty> <empty> <empty> <empty> NIGHT_AURORA_R NIGHT_AURORA_G NIGHT_AURORA_B aurora_power aurora_speed aurora_flash
	screen.VOLUMETRIC_LIGHT=CREPUSCULAR_RAYS <empty> VL_STRENGTH RAYS_SAMPLES <empty> [CUSTOM_VL_COLOR_NOON] [CUSTOM_VL_COLOR_RISESET] [CUSTOM_VL_COLOR_MIDNIGHT]	
	screen.ATMOSPHER_SCATTERING=ATMOSPHERIC_SCATTERING <empty> RAYLEIGH_AMOUNT ATMOSPHERIC_HAZE
	screen.CLOUD=VOLUMETRIC_CLOUDS SMOOTH_CLOUDS <empty> <empty> CALCULATECLOUDDEPTH CALCULATECLOUDSDENSITY CALCULATECLOUDSCONCENTRATION CALCULATECLOUDSQUALITY Vol_Cloud_Coverage CALCLOUD_SPEED CALCLOUDHEIGHT WHITECLOUDS

screen.WATER=WATER_SPEED WAVE_HEIGHT WATER_PARALLAX WATER_CAUSTICS [CUSTOM_WATER_COLOR]

screen.POM=TEXTURE_RESOLUTION <empty> PARALLAX PARALLAX_SHADOW

screen.EFFECTS=[DOF] <empty> [PLANT_WAVE] <empty> FORCE_WET_EFFECT <empty> MOTION_BLUR <empty> LF 
	screen.DOF=DOF HEXAGONAL_BOKEH NOHANDDOF MAX_BLUR_AMOUNT <empty> <empty> FOCUS_BLUR BlurAmount DISTANCE_BLUR MaxDistanceBlurAmount <empty> DistanceBlurRange EDGE_BLUR EdgeBlurAmount <empty> EdgeBlurDecline LINK_FOCUS_TO_BRIGHTNESS_BAR
	screen.PLANT_WAVE=WAVING_GRASS WAVING_WHEAT WAVING_LEAVES WAVING_VINES WAVING_LILIES WAVING_LAVA WAVING_FIRE <empty> WAVING_SHADOW_GRASS WAVING_SHADOW_LEAVES <empty> <empty> GRASS_SPEED GRASS_MOVEMENT PLANT_WAVE_SPEED <empty> <empty> PLANT_SPEED_LIGHT_BAR_LINKER

screen.MISC=*


//-------------------- Sliders --------------------//

sliders=WATER_SPEED WAVE_HEIGHT \
		CUSTOM_T_R CUSTOM_T_G CUSTOM_T_B CUSTOM_T_L \
		SKYLIGHT_NIGHT_R SKYLIGHT_NIGHT_G SKYLIGHT_NIGHT_B SKYLIGHT_NIGHT_L FANTASIC_NIGHTSKY \
		SKYLIGHT_DAY_RED SKYLIGHT_DAY_GREEN SKYLIGHT_DAY_BLUE SKYLIGHT_DAY_L \
		CUSTOM_SL_NN_R CUSTOM_SL_NN_G CUSTOM_SL_NN_B CUSTOM_SL_NN_L \
		CUSTOM_SL_SR_R CUSTOM_SL_SR_G CUSTOM_SL_SR_B CUSTOM_SL_SR_L \
		CUSTOM_SL_NT_R CUSTOM_SL_NT_G CUSTOM_SL_NT_B CUSTOM_SL_NT_L \
		NIGHT_AURORA_R NIGHT_AURORA_G NIGHT_AURORA_B NIGHT_AURORA_L \
		WATER_COLOR_F_R WATER_COLOR_F_G WATER_COLOR_F_B WATER_SPEED WAVE_HEIGHT \
		CUSTOM_VLFC_R CUSTOM_VLFC_G CUSTOM_VLFC_B \
		VL_NOON_R VL_NOON_G VL_NOON_B VL_NOON_L \
		VL_SUNRISESET_R VL_SUNRISESET_G VL_SUNRISESET_B VL_SUNRISESET_L \
		VL_NIGHT_R VL_NIGHT_G VL_NIGHT_B VL_NIGHT_L \
		DARKNESS TONEMAP_STRENGTH BRIGHTNESS_LEVEL SATURATION_STRENGTH \
		RAYLEIGH_AMOUNT ATMOSPHERIC_HAZE \
		POINTLIGHT_COLOR_TEMPERATURE TORCHLIGHT_BRIGHTNESS \
		GI_QUALITY GI_ARTIFACT_REDUCTION GI_RENDER_RESOLUTION GI_RADIUS \
		BlurAmount MaxDistanceBlurAmount DistanceBlurRange EdgeBlurAmount EdgeBlurDecline \
		GRASS_MOVEMENT GRASS_SPEED PLANT_WAVE_SPEED \
		TEXTURE_RESOLUTION sunPathRotation \
		VL_STRENGTH MAX_VL_LIMIT VL_PRECISION \
		Vol_Cloud_Coverage Cloud3Height2 Cloud3Depth2 VOLUMETRIC_CLOUD_SPEED2 CLOUD_DISPERSE2 Vol_Cloud_Coverage2 VOLUMETRIC_CLOUD_LIGHTING2 VFDensityStrength CLOUD_PRECISION2 FOGDENS_SUNRISE FOGDENS_NOON FOGDENS_MIDNIGHT CUSTOM_VLFC_R CUSTOM_VLFC_G CUSTOM_VLFC_B \
		CALCULATECLOUDDEPTH CALCULATECLOUDSDENSITY CALCULATECLOUDSCONCENTRATION CALCULATECLOUDSQUALITY CALCLOUD_SPEED CALCLOUDHEIGHT WHITECLOUDS \
		NIGHT_AURORA_L AURORA_STRENGTH NIGHT_AURORA_R NIGHT_AURORA_G NIGHT_AURORA_B AURORA_COLOR aurora_power aurora_speed aurora_flash \
		TONE EXPOSURE BRIGHTNESS CONTRAST SATURATION VIBRANCE \
		COLOR_BALANCE_S_R COLOR_BALANCE_M_R COLOR_BALANCE_H_R COLOR_BALANCE_S_G COLOR_BALANCE_M_G COLOR_BALANCE_H_G COLOR_BALANCE_S_B COLOR_BALANCE_M_B COLOR_BALANCE_H_B \
		DELAY FRAME_COUNTERS God_Rays_Phase Fog_Coverage Fog_Top Fog_Bottom AtmospherieDensity Noon_Density Sunrise_Sunset_Density Night_Density \
		
